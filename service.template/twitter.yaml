service:
  name: twitter
  icon: http://a2.twimg.com/a/1324402008/images/logos/twitter_newbird_boxed_blueonwhite.png
  description: twitter
  auth_type: oauth1a
  auth_data:
    key: input your key here
    secret: input your secret here
    consumer_params:
      auth_site: https://api.twitter.com
      access_site: http://api.twitter.com
      request_token_path: /oauth/request_token
      access_token_path: /oauth/access_token
      authorize_path: /oauth/authorize
      signature_method: HMAC-SHA1
      scheme: header
  helper: >
    def get_org_uri_tweet(text)
      text.scan(%r{https?://t.co/.*? }).each do |uri|
        uri = uri[0..-2]
        text.gsub! uri, follow_redirect_uri(uri)
      end
      text
    end

    def follow_redirect_uri(uri, limit = 5)
      while limit > 0
        u = URI(uri)
        http = Net::HTTP.new u.host, u.port
        http.use_ssl = true if u.scheme == 'https'
        res = http.get u.path
        if res.code[0] != '3'
          uri = u.to_s
          break
        end
        uri = res['location']
      end
      uri
    end

trigger:
- name: tweets
  description: users tweets
  http_type: oauth
  http_method: get
  period: "*/10 * * * *"
  in_keys: []
  source: /statuses/user_timeline.json
  out_keys: [text, in_reply_to_user, source]
  content_to_hash: >
    parse_json content do |item|
      {
        :text => get_org_uri_tweet(item["text"]),
        :in_reply_to_user => item["in_reply_to_screen_name"],
        :source => item["source"].gsub(/<.*?>/, ''),
        :published => Time.parse(item["created_at"])
      }
    end

- name: tweets with special tags
  description: users tweets with special tags
  http_type: oauth
  http_method: get
  period: "*/10 * * * *"
  in_keys: [tags]
  source: /statuses/user_timeline.json
  out_keys: [text, source]
  content_to_hash: >
    tags_pattern = Regexp.new "\#(#{tags.split(/[ ,]+/).join('|')}) "

    ret = parse_json content do |item|
      {
        :text => item["text"],
        :source => item["source"].gsub(/<.*?>/, ''),
        :published => Time.parse(item["created_at"])
      }
    end

    ret = ret.select { |i| i[:text].match tags_pattern }

    ret.map { |i| i.merge! :text => get_org_uri_tweet(i[:text]) }

action:
- name: tweet
  description: send a tweet
  http_type: oauth
  http_method: post
  in_keys: [status]
  target: /statuses/update.json
  body: >
    { :status => status.strip }
